{"version":3,"sources":["Components/InfoBox/index.jsx","util.js","Components/Maps/index.jsx","Components/Table/index.jsx","Components/LineGraph/LineGraph.jsx","App.js","reportWebVitals.js","index.js"],"names":["index","title","active","isRed","cases","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","countries","zoom","MapContainer","TileLayer","url","attribution","Index","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","evt","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0be2b4b2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nimport \"./index.css\";\n\nfunction index({ title, active, isRed, cases, total, ...props }) {\n  return (\n    <Card\n      className={`infoBox ${active && \"infoBox--selected\"} ${isRed && 'infoBox--red'}`}\n      onClick={props.onClick}\n    >\n      <CardContent>\n        {/* Title */}\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        {/* +120k Number of cases */}\n        <h2 className={`infoBox__cases ${!isRed &&\"infoBox__cases--green\"}`}>{cases}</h2>\n\n        {/* +1.2M Total */}\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default index;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  //   sortedData.sort((a, b) => {\n  //     if (a.cases > b.cases) {\n  //       return -1;\n  //     } else {\n  //       return 1;\n  //     }\n  //   });\n  //   return sortedData;\n  // };\n\n  sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n      <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./index.css\";\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport {showDataOnMap} from '../../util';\n\nfunction index({countries,casesType,center,zoom}) {\n  return (\n    <div className=\"map\">\n     <MapContainer center={center} zoom={zoom}>\n       <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'></TileLayer>\n\n          {/**Loop through countries and draw circles on the screen */}\n          {showDataOnMap(countries,casesType)}\n     </MapContainer>\n    </div>\n  );\n}\n\nexport default index;\n","import React from \"react\";\nimport './index.css';\nimport numeral from 'numeral';\n\nfunction Index({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Index;\n","import React, { useState, useEffect } from \"react\";\n\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType=\"cases\",...props   }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((res) => res.json())\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // const chartData = buildChartData(data);\n         \n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n     \n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./Components/InfoBox\";\nimport Map from \"./Components/Maps\";\nimport Table from \"./Components/Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./Components/LineGraph/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (evt) => {\n    const countryCode = evt.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/countries\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountry(countryCode);\n\n        //All of the data...\n        //From the country response\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n    //https://disease.sh/v3/covid-19/countries\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n  };\n\n  console.log(\"Country Info>>\", countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          {/*Header*/}\n          {/*Title + Select input dropdown filed*/}\n          <h1> COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n          isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n          active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n          isRed\n          active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        {/*Map*/}\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          {/*table*/}\n\n          <h3 className={\".app__graphTitle\"}>Worldwide new {casesType}</h3>\n          {/*Graph*/}\n          <LineGraph className={\"app__graph\"} casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}